{"version":3,"sources":["header.js","form.js","footer.js","results.js","history.js","App.js","index.js"],"names":["Header","React","Component","Form","props","handleSubmit","e","preventDefault","radioSelection","target","routeType","value","setState","urlInput","url","display","getResults","componentDidUpdate","state","functionSwitch","console","log","searchAgain","method","a","fetch","mode","then","response","status","headers","entries","pair","giveAppHeaders","json","apiResponse","provideResults","results","giveAppMethodUrl","onSubmit","this","id","type","name","data-testId","Footer","Results","src","data-testid","count","History","reRunHandler","searchIdx","chosenSearch","searches","giveAppPreviousSearch","map","search","idx","onClick","App","collectHeaders","updateResults","apiResults","newCount","length","apiBody","apiHeaders","storeUrlMethod","newSearch","duplicateCheck","forEach","runPreviousSearch","previousSearch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9db1aa1f.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\nclass Header extends React.Component {\n  render(){\n    return(\n      <header>\n        <h1>RESTy</h1>\n      </header>\n    );\n  }\n};\n\nexport default Header;","import React from 'react';\nimport './form.scss';\n\n\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: false,\n      routeType: 'No route type selected',\n      url: 'No URL provided',\n      method: '',\n      // searchAgainDuplicateCheck: ''\n      functionSwitch: true\n      //define routeType and url as arrays if they need to hold multiple states, use this.setState.push ({ key: data}), to add states to the arrays\n    }\n  }\n\n  \n\n  handleSubmit = e => {\n    e.preventDefault();\n    let radioSelection = e.target.routeType.value;\n    this.setState({ routeType: radioSelection });\n\n    let urlInput = e.target.url.value;\n    this.setState({ url: urlInput });\n\n    // console.log({radioSelection}, {urlInput});\n    // console.log('this.state.url ', this.state.url, 'this.state.routeType ', this.state.routeType);\n    // console.log('this.state ', this.state);\n\n    this.setState({ display: true });\n\n    this.getResults(radioSelection, urlInput);\n  }\n\n  // componentDidUpdate (props) {\n  //  // console.log('========this.props.searchAgain ', this.props.searchAgain);\n  //   if( this.searchAgainDuplicateCheck !== this.props.searchAgain ) {\n  //     this.runAgain();\n  //   }\n\n    \n  // }\n\n  // resetFunctionSwitch() {\n  //   this.setState({ functionSwitch: true})\n  // }\n\n  componentDidUpdate = (props) => {\n  \n    if (this.state.functionSwitch === true){\n      console.log('$$$$$$ ', this.props.searchAgain[0]);\n\n      if(this.props.searchAgain[0]){\n        console.log('INSIDE FORM componentDidUpdate: ', this.props.searchAgain);\n        let method = this.props.searchAgain[0];\n        let url = this.props.searchAgain[1];\n        this.getResults(method, url);\n        this.setState({ functionSwitch: false});\n        // this.setState({ searchAgainDuplicateCheck: this.props.searchAgain});\n      }\n    } else {\n      return;\n    }\n\n  }\n\n  getResults = async (method='GET', url) => {\n    console.log('????????????????method ', method, 'url', url);\n  \n    // console.log('^^^^^^^^this.functionSwitch^^^^^^', this.state.functionSwitch);\n\n    switch(method) {\n      case 'GET':\n        const apiResponse = await fetch(url, { method: `${method}`, mode: 'cors' })\n          .then(response => {\n          if(response.status !==200)return;\n          let headers = {};\n          for (let pair of response.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n\n          this.props.giveAppHeaders(headers);\n          let results = response.json();\n          return results;\n        });\n\n        this.props.provideResults(apiResponse.results);\n\n        if(apiResponse.results){\n          this.props.giveAppMethodUrl(method, url);\n        }\n\n        break;\n\n      case 'POST':\n        fetch(url, {\n        \"method\": `${method}`,\n        \"body\": {\n            \"title\": \"title test\",\n            \"content\": \"content test\",\n            \"userId\": 1,\n            \"categoryId\": 4,\n            // \"imageUrl\": \"https://i.picsum.photos/id/866/700/400.jpg\"\n        },\n        // \"headers\": {\n        //     \"Content-type\": \"application/json; charset=UTF-8\"\n        // }\n        })\n        .then(response => response.json())\n        .then(json => console.log(json))\n\n        break;\n\n      case 'PUT':\n        console.log('In Switch PUT')\n        //put fake api PUT here\n        break;\n\n     case 'DELETE':\n        console.log('In Switch DELETE')\n        //put fake api DELETE here\n    }\n\n  }\n \n  render(){\n    //console.log('========searchAgainDuplicateCheck ', this.state.searchAgainDuplicateCheck);\n    // if (flip === 1) {\n      // console.log('FIRSTTIMETHROUGH', this.props.searchAgain);\n      // if(this.props.searchAgain.method !== 'GET'){\n      //   this.getResults(this.props.searchAgain.method, this.props.searchAgain.url);\n      //   console.log('*******this.props.searchAgain @ form Render ******* ', this.props.searchAgain);\n      //   // flip = 0;\n      // }\n    // }\n      \n    return(\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <fieldset>\n            <label>\n              <input id=\"getRadio\" type=\"radio\" name=\"routeType\" value=\"GET\" />\n              GET\n            </label>\n            <label>\n              <input id=\"postRadio\" type=\"radio\" name=\"routeType\" value=\"POST\" />\n              POST\n            </label>\n            <label>\n              <input id=\"putRadio\" type=\"radio\" name=\"routeType\" value=\"PUT\" />\n              PUT\n            </label>\n            <label>\n              <input id=\"deleteRadio\" type=\"radio\" name=\"routeType\" value=\"DELETE\" />\n              DELETE\n            </label>\n            <section id=\"buttonSection\"> \n              <label>\n                URL: \n                <input id=\"urlInput\" type='text' name=\"url\" />\n              </label>\n              <button data-testId=\"submitButton\" type=\"submit\" >Make it so.</button>\n            </section>\n          </fieldset>\n        </form>\n        \n        {!this.state.display ? '' : \n        <div>\n          <section id=\"outputSection\">{this.state.routeType}: {this.state.url}</section>\n        </div>\n        }\n\n      </>\n    );\n  }\n};\n\nexport default Form;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component {\n  render(){\n    return(\n      <footer>\n        &copy; 2021 SP\n      </footer>\n    );\n  }\n};\n\nexport default Footer;","import React from 'react';\nimport './results.scss';\nimport ReactJson from 'react-json-view';\n\nclass Results extends React.Component {\n  render(){\n    console.log('this.props results page ', this.props);\n    return(\n      <div id=\"resultsDiv\">\n        <section id=\"headersSection\">\n          <h3>Response Headers</h3>\n          <ReactJson src={this.props.headers} />\n        </section>\n        <section id=\"responseBodySection\">\n          <h3>Response Body</h3>\n          <ReactJson src={this.props.results} />\n          <p>Count: <span data-testid=\"count\">{this.props.count}</span></p>\n        </section>\n      </div>\n    );\n  }\n};\n\nexport default Results;","import React from 'react';\nimport './history.scss';\nimport ReactJson from 'react-json-view';\n\n\n\nclass History extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      searchAgain : {}\n    }\n  }\n  \n  reRunHandler = (e) => {\n    let searchIdx = e.target.name;\n    console.log('INSIDE reRunHandler searchIdx ', searchIdx);\n    let chosenSearch = this.props.searches[searchIdx];\n    console.log({chosenSearch});\n    this.setState({ searchAgain: chosenSearch });\n    this.props.giveAppPreviousSearch(chosenSearch);\n\n    \n\n  }\n\n  render(){\n    \n    return(\n      <div id=\"historyDiv\">\n        <h3>Search History - Click button to search again</h3>\n        <ul>\n        {this.props.searches.map((search, idx) => {\n          return ( \n          <button type=\"submit\" name={idx} key={idx} onClick={this.reRunHandler}>{search.method} {search.url}</button> \n          )\n            // make ths a link or a button so that it will send the method and url back to App.js and then send the new request\n        })}\n        </ul>\n      </div>\n    );\n  }\n};\n\nexport default History;","import React from 'react';\n\n// import './app.scss';\nimport Header from './header.js';\nimport Form from './form.js';\nimport Footer from './footer.js';\nimport Results from './results.js';\nimport History from './history.js';\nimport './app.scss';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      count: 0,\n      results: [],\n      headers: [],\n      searches: [],\n      searchAgain: []\n    }\n  }\n\n  collectHeaders = (headers) => {\n    this.setState({ headers });\n  }\n\n  updateResults = (apiResults) => {\n    let newCount = apiResults.length;\n    // let apiHeaders;\n    let apiBody = apiResults;\n    console.log('length of results ', newCount);\n    // this.setState({ headers: apiHeaders })\n    this.setState({ results: apiBody });\n    this.setState({ count: newCount });\n  }\n\n  collectHeaders = (apiHeaders) => {\n    this.setState({headers: apiHeaders});\n  }\n\n  storeUrlMethod = (method, url) => {\n    let newSearch = { method, url }; //create a new object from the method and url { method: method, url: url }\n    let duplicateCheck = 0;\n    this.state.searches.forEach(search => {\n      if(search[0] === method && search[1] === url){\n        duplicateCheck = 1;\n        console.log('duplicateCheck in forEach ', duplicateCheck);\n      }\n    })\n    console.log('duplicateCheck after forEach ', duplicateCheck);\n\n    if(duplicateCheck !== 1) {\n      // this.setState({ searches: this.state.searches.concat([method, url])})\n      // this.setState( prevState => ({ \n      //   searches: [...prevState.searches, [method, url]]\n      this.setState({ searches: [...this.state.searches, newSearch]}) //takes all existing search content and adds on newSearch\n      // })\n    }\n    \n  }\n\n  runPreviousSearch = (previousSearch) => {\n    // console.log('INSIDE APP runPreviousSearch ', previousSearch.url); \n    //now have access to the METHOD and URL from the selected search history, need to pass it to form's method to rerun\n\n    this.setState({searchAgain: [previousSearch.method, previousSearch.url]});\n\n   \n  }\n\n  render() {\n    // console.log('+++++++++++++++runPrevious this.state ', this.state.searchAgain);\n    return (\n      <>\n        <Header />\n        <Form \n          provideResults={this.updateResults}\n          giveAppHeaders={this.collectHeaders}\n          giveAppMethodUrl={this.storeUrlMethod}\n          searchAgain={this.state.searchAgain}\n        />\n        <Results \n        headers={this.state.headers}\n        results={this.state.results}\n        count={this.state.count}\n        />\n        <History \n         searches = {this.state.searches}\n         giveAppPreviousSearch = {this.runPreviousSearch}\n        />\n        <Footer />\n      </>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}