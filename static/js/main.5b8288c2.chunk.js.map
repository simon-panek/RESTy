{"version":3,"sources":["header.js","form.js","footer.js","results.js","history.js","help.js","App.js","index.js"],"names":["Header","className","to","React","Component","Form","props","handleSubmit","e","preventDefault","radioSelection","target","routeType","value","setState","urlInput","url","requestBody","display","getResults","componentDidUpdate","state","functionSwitch","searchAgain","method","a","fetch","mode","then","response","status","headers","entries","pair","giveAppHeaders","json","apiResponse","provideResults","results","giveAppMethodUrl","console","log","postResponse","onSubmit","this","id","type","name","rows","cols","data-testId","Footer","Results","src","data-testid","count","History","reRunHandler","searchIdx","chosenSearch","searches","giveAppPreviousSearch","map","search","idx","onClick","Help","href","App","collectHeaders","updateResults","apiResults","newCount","length","apiBody","apiHeaders","storeUrlMethod","newSearch","duplicateCheck","forEach","runPreviousSearch","previousSearch","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b8288c2.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n  render(){\n    return(\n      <header>\n          <h1>RESTy</h1>\n          <nav>\n            <ul>\n              <li className=\"navList\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"navList\">\n                <Link to=\"/history\">History</Link>\n              </li>\n              <li className=\"navList\">\n                <Link to=\"/help\">Help</Link>\n              </li>\n            </ul>\n          </nav>\n      </header>\n    );\n  }\n};\n\nexport default Header;","import React from 'react';\nimport './form.scss';\n\n\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: false,\n      functionSwitch: true,\n      method: '',\n      requestBody: '',\n      routeType: 'No route type selected',\n      url: 'No URL provided'\n    }\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let radioSelection = e.target.routeType.value;\n    this.setState({ routeType: radioSelection });\n\n    let urlInput = e.target.url.value;\n    this.setState({ url: urlInput });\n\n    let requestBody = e.target.requestBody.value;\n    this.setState({ requestBody: requestBody });\n\n    // console.log({radioSelection}, {urlInput});\n    // console.log('this.state.url ', this.state.url, 'this.state.routeType ', this.state.routeType);\n    // console.log('this.state ', this.state);\n\n    this.setState({ display: true });\n\n    this.getResults(radioSelection, urlInput, requestBody);\n  }\n\n  // componentDidUpdate (props) {\n  //  // console.log('========this.props.searchAgain ', this.props.searchAgain);\n  //   if( this.searchAgainDuplicateCheck !== this.props.searchAgain ) {\n  //     this.runAgain();\n  //   }\n\n    \n  // }\n\n  // resetFunctionSwitch() {\n  //   this.setState({ functionSwitch: true})\n  // }\n\n  componentDidUpdate = (props) => {\n  \n    if (this.state.functionSwitch === true){\n      // console.log('$$$$$$ ', this.props.searchAgain[0]);\n\n      if(this.props.searchAgain[0]){\n        // console.log('INSIDE FORM componentDidUpdate: ', this.props.searchAgain);\n        let method = this.props.searchAgain[0];\n        let url = this.props.searchAgain[1];\n        let requestBody = this.props.searchAgain[2];\n        this.getResults(method, url, requestBody);\n        this.setState({ functionSwitch: false});\n        // this.setState({ searchAgainDuplicateCheck: this.props.searchAgain});\n      }\n    } else {\n      return;\n    }\n\n  }\n\n  getResults = async (method='GET', url, requestBody='') => {\n    // console.log('????????????????method ', method, 'url', url);\n  \n    // console.log('^^^^^^^^this.functionSwitch^^^^^^', this.state.functionSwitch);\n\n    switch(method) {\n      case 'GET':\n        const apiResponse = await fetch(url, { method: `${method}`, mode: 'cors' })\n          .then(response => {\n          if(response.status !==200)return;\n          let headers = {};\n          for (let pair of response.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n\n          this.props.giveAppHeaders(headers);\n          let results = response.json();\n          return results;\n        });\n\n        this.props.provideResults(apiResponse.results);\n\n        if(apiResponse.results){\n          this.props.giveAppMethodUrl(method, url, requestBody);\n          console.log('@@@@@@@@method, url, requestBody ', method, url, requestBody);\n        }\n        break;\n\n      case 'POST':\n        const postResponse = await fetch(url, {\n        \"method\": `${method}`,\n        \"body\": `${requestBody}`,\n        \"headers\": {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n        })\n        .then(response => {\n          if(response.status !==200)return;\n          let headers = {};\n          for (let pair of response.headers.entries()) {\n            headers[pair[0]] = pair[1];\n          }\n          // console.log({postResponse});\n          this.props.giveAppHeaders(headers);\n          let results = response.json();\n          return results;\n        });\n        console.log({postResponse});\n        // console.log('postResponse.results ', postResponse.results);\n        this.props.provideResults(postResponse);\n\n        if(postResponse){\n          this.props.giveAppMethodUrl(method, url, requestBody);\n          console.log('*&*&*&*& method, url, requestBody', method, url, requestBody);\n        }\n          \n        //   response.json())\n        // .then(json => {\n        //   console.log({json});\n        // })\n\n        break;\n\n      case 'PUT':\n        console.log('In Switch PUT')\n        //put fake api PUT here\n        break;\n\n     case 'DELETE':\n        console.log('In Switch DELETE')\n        //put fake api DELETE here\n    }\n\n  }\n \n  render(){\n    //console.log('========searchAgainDuplicateCheck ', this.state.searchAgainDuplicateCheck);\n    // if (flip === 1) {\n      // console.log('FIRSTTIMETHROUGH', this.props.searchAgain);\n      // if(this.props.searchAgain.method !== 'GET'){\n      //   this.getResults(this.props.searchAgain.method, this.props.searchAgain.url);\n      //   console.log('*******this.props.searchAgain @ form Render ******* ', this.props.searchAgain);\n      //   // flip = 0;\n      // }\n    // }\n      \n    return(\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <fieldset>\n            <label>\n              <input id=\"getRadio\" type=\"radio\" name=\"routeType\" value=\"GET\" />\n              GET\n            </label>\n            <label>\n              <input id=\"postRadio\" type=\"radio\" name=\"routeType\" value=\"POST\" />\n              POST\n            </label>\n            <label>\n              <input id=\"putRadio\" type=\"radio\" name=\"routeType\" value=\"PUT\" />\n              PUT\n            </label>\n            <label>\n              <input id=\"deleteRadio\" type=\"radio\" name=\"routeType\" value=\"DELETE\" />\n              DELETE\n            </label>\n            <section id=\"buttonSection\"> \n              <label>\n                URL: \n                <input id=\"urlInput\" type='text' name=\"url\" />\n              </label>\n              <label>\n                Request Body: \n                <textarea id=\"requestBodyInput\" rows='5' cols='30' name=\"requestBody\" />\n              </label>\n              <button data-testId=\"submitButton\" type=\"submit\" >Make it so.</button>\n            </section>\n          </fieldset>\n        </form>\n        \n        {!this.state.display ? '' : \n        <div>\n          <section id=\"outputSection\">{this.state.routeType}: {this.state.url}</section>\n        </div>\n        }\n\n      </>\n    );\n  }\n};\n\nexport default Form;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component {\n  render(){\n    return(\n      <footer>\n        &copy; 2021 SP\n      </footer>\n    );\n  }\n};\n\nexport default Footer;","import React from 'react';\nimport './results.scss';\nimport ReactJson from 'react-json-view';\n\nclass Results extends React.Component {\n  render(){\n    console.log('this.props results page ', this.props);\n    return(\n      <div id=\"resultsDiv\">\n        <section id=\"headersSection\">\n          <h3>Response Headers</h3>\n          <ReactJson src={this.props.headers} />\n        </section>\n        <section id=\"responseBodySection\">\n          <h3>Response Body</h3>\n          <ReactJson src={this.props.results} />\n          <p>Count: <span data-testid=\"count\">{this.props.count}</span></p>\n        </section>\n      </div>\n    );\n  }\n};\n\nexport default Results;","import React from 'react';\nimport './history.scss';\nimport ReactJson from 'react-json-view';\n\n\n\nclass History extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      searchAgain : {}\n    }\n  }\n  \n  reRunHandler = (e) => {\n    let searchIdx = e.target.name;\n    console.log('INSIDE reRunHandler searchIdx ', searchIdx);\n    let chosenSearch = this.props.searches[searchIdx];\n    console.log({chosenSearch});\n    this.setState({ searchAgain: chosenSearch });\n    this.props.giveAppPreviousSearch(chosenSearch);\n  }\n\n  render(){\n    \n    return(\n      <div id=\"historyDiv\">\n        <h3>Search History - Click button to search again</h3>\n        <ul>\n        {this.props.searches.map((search, idx) => {\n          return ( \n          <button id=\"previousSearchButton\" type=\"submit\" name={idx} key={idx} onClick={this.reRunHandler}>{search.method} {search.url} {search.requestBody}</button> \n          )\n            // make ths a link or a button so that it will send the method and url back to App.js and then send the new request\n        })}\n        </ul>\n      </div>\n    );\n  }\n};\n\nexport default History;","import React from 'react';\nimport './header.scss';\n\nclass Help extends React.Component {\n  render(){\n    return(\n      <>\n          <h2>Help</h2>\n          <p>GET: Enter the desired URL, append the record ID as a parameter if a single record is desired.</p>\n          <p>POST: Enter the desired URL and the body of the request to be posted to a new record. The format of the body may be specified by the API being used.</p>\n          <p>PUT: Enter the desired URL with the record ID appended as a parameter. Enter the body content to be updated. The format of the body will need to match that of the record attempting to be updated.</p>\n          <p>DELETE: Enter the desired URL with the record ID appended as a parameter.</p>\n          <p>Test API routes and request body information can be found at  \n          <a href=\"http://fakeapi.jsonparseronline.com/\">FakeApi</a>\n          </p>\n      </>\n    );\n  }\n};\n\nexport default Help;","import React from 'react';\n\n// import './app.scss';\nimport Header from './header.js';\nimport Form from './form.js';\nimport Footer from './footer.js';\nimport Results from './results.js';\nimport History from './history.js';\nimport Help from './help.js';\nimport './app.scss';\nimport  { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      count: 0,\n      results: [],\n      headers: [],\n      searches: [],\n      searchAgain: []\n    }\n  }\n\n  collectHeaders = (headers) => {\n    this.setState({ headers });\n  }\n\n  updateResults = (apiResults) => {\n    console.log('^^^^^^Inside Update Results ', apiResults);\n    let newCount = apiResults.length;\n    // let apiHeaders;\n    let apiBody = apiResults;\n    console.log('length of results ', newCount);\n    // this.setState({ headers: apiHeaders })\n    this.setState({ results: apiBody });\n    this.setState({ count: newCount });\n  }\n\n  collectHeaders = (apiHeaders) => {\n    this.setState({headers: apiHeaders});\n  }\n\n  storeUrlMethod = (method, url, requestBody) => {\n    let newSearch = { method, url }; //create a new object from the method and url { method: method, url: url }\n    let duplicateCheck = 0;\n    this.state.searches.forEach(search => {\n      if(search[0] === method && search[1] === url){\n        duplicateCheck = 1;\n        console.log('duplicateCheck in forEach ', duplicateCheck);\n      }\n    })\n    console.log('duplicateCheck after forEach ', duplicateCheck);\n\n    if(duplicateCheck !== 1) {\n      // this.setState({ searches: this.state.searches.concat([method, url])})\n      // this.setState( prevState => ({ \n      //   searches: [...prevState.searches, [method, url]]\n      this.setState({ searches: [...this.state.searches, newSearch]}) //takes all existing search content and adds on newSearch\n      // })\n    }\n    console.log('@storeURLMETHOD this.state.searches ', this.state.searches);\n    \n  }\n\n  runPreviousSearch = (previousSearch) => {\n    // console.log('INSIDE APP runPreviousSearch ', previousSearch.url); \n    //now have access to the METHOD and URL from the selected search history, need to pass it to form's method to rerun\n\n    this.setState({searchAgain: [previousSearch.method, previousSearch.url, previousSearch.requestBody]});\n  }\n\n  render() {\n    // console.log('+++++++++++++++runPrevious this.state ', this.state.searchAgain);\n    return (\n      <BrowserRouter>\n    \n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <Form \n              provideResults={this.updateResults}\n              giveAppHeaders={this.collectHeaders}\n              giveAppMethodUrl={this.storeUrlMethod}\n              searchAgain={this.state.searchAgain}\n            />\n            <Results \n            headers={this.state.headers}\n            results={this.state.results}\n            count={this.state.count}\n            />\n          </Route>\n          <Route exact path=\"/history\">\n            <History \n            searches = {this.state.searches}\n            giveAppPreviousSearch = {this.runPreviousSearch}\n            />\n          </Route>\n          <Route exact path=\"/help\">\n            <Help />\n          </Route>\n        </Switch>\n        <Footer />\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}